name: Deploy a AWS Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: prueba-egroup
  ECS_SERVICE: servicio-egroup
  ECS_CLUSTER: prueba-egroup
  ECS_TASK_DEFINITION: prueba-egroup-task-revision1.json
  CONTAINER_NAME: prueba-egroup

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Git Semantic Version
        uses: PaulHatch/semantic-version@v5.0.3
        with:
          major_pattern: "major:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}-prerelease${increment}"
        id: version


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          NEW_VERSION: ${{steps.version.outputs.version}}
        run: |
          docker buildx create --name mybuilder --driver docker-container --bootstrap --use
          docker buildx build --platform linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6 -t $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_VERSION --push .
          docker buildx build --platform linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6 -t $ECR_REGISTRY/$ECR_REPOSITORY:latest --push .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Install jq
        run: |
          sudo apt-get install jq

      - name: Clean up old tasks and images
        run: |
          # Set the AWS CLI output format
          export AWS_DEFAULT_OUTPUT=json

          # Remove stopped tasks
          aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --desired-status STOPPED | jq '.taskArns[]' | xargs -I {} aws ecs stop-task --cluster ${{ env.ECS_CLUSTER }} --task {}
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
